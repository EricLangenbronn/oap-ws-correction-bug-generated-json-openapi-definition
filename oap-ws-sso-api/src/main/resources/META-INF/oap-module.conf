name: oap-ws-sso-api
dependsOn = [
  oap-ws-sso-api-roles
]
services {
  oap-ws-sso-roles {
    implementation = oap.ws.sso.SecurityRoles
    parameters.provider = modules.oap-ws-sso-api-roles.oap-ws-sso-roles-provider
  }

  oap-ws-sso-authenticator {
    implementation = oap.ws.sso.Authenticator
    remote.name = oap-ws-sso-authenticator-server
  }

  oap-ws-sso-security-interceptor {
    profile = ws-security
    implementation = oap.ws.sso.interceptor.SecurityInterceptor
    name = oap-ws-sso-security-interceptor
    parameters {
      authenticator: modules.this.oap-ws-sso-authenticator
      roles: modules.this.oap-ws-sso-roles
    }
  }

  oap-ws-sso-api-key-interceptor {
    profile = ws-security
    implementation = oap.ws.sso.interceptor.ApiKeyInterceptor
    name = oap-ws-sso-api-key-interceptor
    parameters {
      authenticator = modules.this.oap-ws-sso-authenticator
    }
  }

  oap-ws-sso-throttle-login-interceptor {
    profile = ws-security
    implementation = oap.ws.sso.interceptor.ThrottleLoginInterceptor
    name = oap-ws-sso-throttle-login-interceptor
  }

   oap-ws-sso-auth0-token-provider {
    profile = ws-security
    implementation = oap.ws.sso.Auth0TokenProvider
    name = oap-ws-sso-auth0-token-provider
    parameters {
        domain = <change me>
    }
  }

  oap-ws-sso-jwt-user-provider {
    implementation = oap.ws.sso.UserProvider
    remote {
      name = oap-ws-sso-user-provider-server
    }
  }

  oap-ws-sso-jwt-security-interceptor {
     profile = ws-security
     implementation = oap.ws.sso.interceptor.JWTSecurityInterceptor
     name = oap-ws-sso-jwt-security-interceptor
      parameters {
        userProvider = modules.this.oap-ws-sso-jwt-user-provider
        tokenProvider = modules.this.oap-ws-sso-auth0-token-provider
      }
    }

}
