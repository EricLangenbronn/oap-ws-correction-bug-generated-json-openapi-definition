name = oap-ws-vaidate-test
dependsOn = oap-ws
services {
  validatedWS.implementation = oap.ws.TestValidatedWS
  testWS.implementation = "oap.ws.WebServicesLocalTest$TestWS"
  no-profile.implementation = "oap.ws.WebServicesProfileTest$TestWS"

  with-profile {
    implementation = "oap.ws.WebServicesProfileTest$TestWS"
    profile = test-profile
  }

  new-profile {
    implementation = "oap.ws.WebServicesProfileTest$TestWS"
    profile = new-profile
  }

  sessionWS.implementation = "oap.ws.WebServicesSessionTest$TestWS"
  math.implementation = "oap.ws.WebServicesTest$MathWS"
  handler.implementation = "oap.ws.WebServicesTest$TestHandler"
  interceptor.implementation = "oap.ws.interceptor.InterceptorTest$TestWS"
  pass-interceptor.implementation = "oap.ws.interceptor.InterceptorTest$PassInterceptor"
  error-interceptor.implementation = "oap.ws.interceptor.InterceptorTest$ErrorInterceptor"
  mvpm.implementation = "oap.ws.validate.MethodValidatorPeerMethodTest$TestWS"
  mvpp.implementation = "oap.ws.validate.MethodValidatorPeerParamTest$TestWS"
  vj.implementation = "oap.ws.validate.ValidateJsonTest$TestWS"
  vpj.implementation = "oap.ws.validate.ValidatePartialJsonTest$TestWS"
}

ws {
  services {
    #  ValidationTest
    validatedWS.path = vaildation/service

    #  WebServiceLocalTest
    testWS {
      path = test
      protocol = LOCAL
    }

    #  WebServicesProfileTest
    no-profile.path = test-no-profile

    with-profile {
      path = new-profile
      profile = new-profile
    }

    #  WebServicesSessionTest
    sessionWS {
      path = session
      sessionAware = true
    }

    #  WebServicesTest
    math.path = [
      math
      x/v/math
    ]

    #  InterceptorTest
    interceptor {
      path = interceptor
      sessionAware: true
      interceptors = [
        oap-ws-vaidate-test.pass-interceptor,
        oap-ws-vaidate-test.error-interceptor
      ]
    }

    #  WebServicesTest
    mvpm.path = mvpm
    mvpp.path = mvpp
    vj.path = vj
    vpj.path = vpj
  }

  handlers {
    #  WebServicesTest
    handler.path = [
      x/h
      ""
      /
    ]
  }
}
