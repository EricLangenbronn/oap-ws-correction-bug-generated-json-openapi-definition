name: oap-ws-sso
dependsOn = [
  oap-ws
  oap-ws-sso-api
]

services {
  oap-ws-sso-user-provider {
    implementation = oap.ws.sso.UserProvider
    remote {
      name = oap-ws-sso-user-provider-server
    }
  }

  oap-ws-sso-authenticator-server {
    implementation = oap.ws.sso.UserAuthenticator
    parameters {
      userProvider: modules.this.oap-ws-sso-user-provider
      expirationTime: 7d
    }
  }

  oap-ws-sso-jwt-security-interceptor {
   profile = [
            ws-security
            jwt-support
    ]
   implementation = oap.ws.sso.interceptor.JWTSecurityInterceptor
   name = oap-ws-sso-jwt-security-interceptor
    parameters {
      userProvider = modules.this.oap-ws-sso-user-provider
      tokenProvider = modules.oap-ws-sso-api.oap-ws-sso-token-provider
    }
  }

  auth-ws {
    implementation = oap.ws.sso.AuthWS
    parameters {
      authenticator = modules.this.oap-ws-sso-authenticator-server
      sessionManager = modules.oap-ws.session-manager
      roles = modules.oap-ws-sso-api.oap-ws-sso-roles
    }
    ws-service {
      path = auth
      sessionAware = true
      interceptors = [
        oap-ws-sso-api.oap-ws-sso-security-interceptor
        oap-ws-sso-api.oap-ws-sso-throttle-login-interceptor
      ]
    }
  }
}
